
pathsave = 'C:\Users\Owner\Desktop\SVR Code + Figs\MATLAB scripts\Analyses In Progress\Percept\Nicole 417\';
%% Left Hem
dateLeft = {};
stimsL = [];
contactL = [];
durationL = [];
powerSpectraLeft =[];
freqLeft = [];
indexL = 0;

%% Right Hem
dateRight = {};
stimsR = [];
contactR = [];
durationR = [];
powerSpectraRight =[];
freqRight = [];
indexR = 0;


if ~exist('data_VCVS')
    data_VCVS = data;
end
patient = input('Enter patient ID: ');

%% Loop Thru Data
for i = 1:length(data_VCVS)
    checkIndef = 0;
    if strcmp(data_VCVS(i).recordings,'None')
        continue
    end
    if ~strcmp(data_VCVS(i).recordings,'BrainSense')
        checkIndef =1;
    end
    date = data_VCVS(i).js.SessionDate;
    if checkIndef
        checkChans =[];
        contact=[];
        streamscheck =[];
        if patient == 4
            streamscheck = 1;
            checkChans = 3;
            contact = 1;
        end
        if patient == 5 || patient ==6 || patient == 8
            streamscheck = 1;
            checkChans = [3,6];
            contact = [1,1];
        end
        if patient == 7
            streamscheck = 1;
            checkChans = 6;
            contact = 1;
        end
        for s = 1:length(streamscheck)
            indef = data_VCVS(i).dat1.stream1(streamscheck(s));
            for q = 1:length(checkChans)
                if checkChans(q)<4
                    tdL = indef.origDat(checkChans(q),:);
                    if length(tdL)/(60*250) <.1
                        continue
                    end
                    [PSD,freq] = computeSpectrum(tdL);
                    PSD = PSD';
                    freq = freq';
                    powerSpectraLeft = [powerSpectraLeft;PSD];
                    freqLeft = [freqLeft;freq];
                    indexL = indexL+1;
                    dateLeft{indexL} = date;
                    stimsL(indexL) = 0;
                    contactL(indexL) = contact(q);
                    durationL(indexL) = length(tdL)/(60*250);
                else
                    tdR = indef.origDat(checkChans(q),:);
                    if length(tdR)/(60*250) <.1
                        continue
                    end
                    [PSD,freq] = computeSpectrum(tdR);
                    PSD = PSD';
                    freq = freq';
                    powerSpectraRight = [powerSpectraRight;PSD];
                    freqRight = [freqRight;freq];
                    indexR = indexR+1;
                    dateRight{indexR} = date;
                    stimsR(indexR) = 0;
                    contactR(indexR) = contact(q);
                    durationR(indexR) = length(tdR)/(60*250);
                end
            end
        end
    end
    curr_dat = data_VCVS(i).dat1.stimVlfp;
    if isempty(curr_dat)
        continue
    end
    for j = 1:length(curr_dat)
        stream = curr_dat(j);
        if ~isfield(stream,'label')
            continue
        end
        if isempty(stream.label)
            continue
        end
        if ~contains(stream.label,'BL')
            continue
        end
        chans = stream.ch;
        for c =1:length(chans)
            channel = chans{c};
            if isempty(channel)
                continue
            end
            if contains(channel,'Left','IgnoreCase',true)
                tdL = stream.raw{c};
                if length(tdL)/(60*250) <.1
                        continue
                    end
                [PSD,freq] = computeSpectrum(tdL);
                PSD = PSD';
                freq = freq';
                powerSpectraLeft = [powerSpectraLeft;PSD];
                freqLeft = [freqLeft;freq];
                indexL = indexL+1;
                dateLeft{indexL} = date;
                if isempty(stream.stim)
                    stimsL(indexL) = -1;
                else
                    stimsL(indexL) = mode(stream.stim(:,c));
                end
                if contains(channel,'Zero','IgnoreCase',true)
                    contactL(indexL) = 1;
                else
                    contactL(indexL) = 2;
                end
                durationL(indexL) = length(tdL)/(60*250);

            elseif contains(channel,'Right','IgnoreCase',true)
                tdR = stream.raw{c};
                if length(tdR)/(60*250) <.1
                        continue
                    end
                [PSD,freq] = computeSpectrum(tdR);
                PSD = PSD';
                freq = freq';
                powerSpectraRight = [powerSpectraRight;PSD];
                freqRight = [freqRight;freq];
                indexR = indexR+1;
                dateRight{indexR} = date;
                if isempty(stream.stim)
                    stimsR(indexR) = -1;
                else
                    stimsR(indexR) = mode(stream.stim(:,c));
                end
                if contains(channel,'Zero','IgnoreCase',true)
                    contactR(indexR) = 1;
                else
                    contactR(indexR) = 2;
                end
                durationR(indexR) = length(tdR)/(60*250);

            end
        end
    end
end


%% Legends
legendL = strcat(extractBefore(dateLeft,'T')',{';   '},string(stimsL'),{'mA  '},string(contactL'),{';   '},string(durationL'),{'min'});
legendR = strcat(extractBefore(dateRight,'T')',{';   '},string(stimsR'),{'mA  '},string(contactR'),{';   '},string(durationR'),{'min'});

%%

cmap = colormap('jet');
close all
fig = figure;

subplot(1,2,1);
for i = 1:height(powerSpectraLeft)
    plot(freqLeft(i,:),20*log10(powerSpectraLeft(i,:)),'Color',cmap(i*floor(256/indexL),:));
    hold on
end
title('Left Hemisphere Resting State')
xlabel('Frequency')
ylabel('Power (dB)')
legend(cellstr(legendL));
subplot(1,2,2);
for i = 1:height(powerSpectraRight)
    plot(freqRight(i,:),20*log10(powerSpectraRight(i,:)),'Color',cmap(i*floor(256/indexR),:));
    hold on
end
title('Right Hemisphere Resting State')
xlabel('Frequency')
ylabel('Power (dB)')
legend(cellstr(legendR));
sgtitle(strcat('00',string(patient),' VCVS'))
linkaxes
xlim([0,60])
%  saveas(gcf,strcat(pathsave,'00',string(patient),' VCVS.png'))
%  savefig(gcf,strcat(pathsave,'00',string(patient),' VCVS.fig'))
%  close all


















