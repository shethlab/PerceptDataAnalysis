%% Template Generation
%% Inputs
% circadianData: Matrix of Data organized in 2D with values for each time
% of day

% acrophases: vector of acrophases generated by cosinor for each day
% pvals: associated pvalue of cosinor fit for each day
% days: day since VCVS DBS on for each day in the matrix
% smooth: Binary, 1 if each matrix column is to be gaussian smoothed (within day
% smoothing)
% Overlaid: Binary, 1 if Templates are to be plotted on top of each other instead of on
% differnet plots
% Wrapped: Binary, 1 if templates are to be plotted in rose plot
% orientation (circular) rather than linear
% daystoplot: cell array containing dates for individual percentile
% templates
% bl: Binary, 1 if plotting templates for both hemispheres
function zoneTemplateGeneration(circadianData,acrophases,pvals,days,smooth,overlaid,wrapped,daystoplot,bl)


%% Zone Days and Colors
if isstruct(daystoplot)
    preDBSdays = {-100:-1;-100:-1;-100:-1;-100:-1;-100:-1};
    maniadays = daystoplot.hypomania;
    postDBSdays = daystoplot.non_responder;
    healthydays = daystoplot.responder;
    single_day = 0;
else

    preDBSdays = daystoplot{1};
    maniadays = daystoplot{2};
    postDBSdays = daystoplot{3};
    healthydays = daystoplot{4};
    single_day = 1;
end

c_red = [255,0,0]/255;
c_blue = [0,0,255]/255;
c_purple = [127,63,152]/255;
c_yellow = [255,215,0]/255;

hems = {'Left Hemisphere','Right Hemisphere'};

%% Rotate and Smooth Matrix
smoothedRotatedCircadianMatrices = {};
for i = 1:5
    smoothedRotatedCircadianMatrices{i,1} = circadianData{i,1};
    for j = 2:3
        smoothedRotatedCircadianMatrices{i,j} = smoothRotate(circadianData{i,j},acrophases{i,j},pvals{i,j},smooth);
    end

end




%% Generate Template Arrays
templates = {};
for i = 1:5
    templates{i,1} = smoothedRotatedCircadianMatrices{i,1};
    for j = 2:3
        %% Pre DBS
        [~, indspre] = intersect(days{i,j},preDBSdays{i});
        if ~single_day
            indspre=setdiff(indspre,find(isnan(acrophases{i,j}(:,:,1))));
        end
        templates{i,j}(:,1) = median(smoothedRotatedCircadianMatrices{i,j}(:,indspre),2,'omitnan');



        [~, maniainds] = intersect(days{i,j},maniadays{i});
        if ~single_day
            maniainds=setdiff(maniainds,find(isnan(acrophases{i,j}(:,:,1))));
        end
        templates{i,j}(:,2) = median(smoothedRotatedCircadianMatrices{i,j}(:,maniainds),2,'omitnan');


        [~, postDBSinds] = intersect(days{i,j},postDBSdays{i});
        if ~single_day
            postDBSinds=setdiff(postDBSinds,find(isnan(acrophases{i,j}(:,:,1))));
        end
        templates{i,j}(:,3) = median(smoothedRotatedCircadianMatrices{i,j}(:,postDBSinds),2,'omitnan');


        [~, indshealth] = intersect(days{i,j},healthydays{i});
        if ~single_day
            indshealth=setdiff(indshealth,find(isnan(acrophases{i,j}(:,:,1))));
        end
        templates{i,j}(:,4) = median(smoothedRotatedCircadianMatrices{i,j}(:,indshealth),2,'omitnan');
    end
end


%% Plot Templates Wrapped or Unwrapped
if wrapped
    for h = 2:2+bl
        figure('Units','inches','Position',[1 1 2 5]);
        %figure('Position', get(0, 'Screensize'));

        t = tiledlayout(2-overlaid,5);
        j = 1;
        for i =[1,3,4,2,5]
            nexttile(j)
            polarPlotDay(templates{i,h}(:,1),smoothedRotatedCircadianMatrices{i,1},c_yellow);
            hold on
            %     polarPlotDay(templates{i,h}(:,2),smoothedRotatedCircadianMatrices{i,1},c_red);
            if ~overlaid
                nexttile(5+j)
            end
            polarPlotDay(templates{i,h}(:,3),smoothedRotatedCircadianMatrices{i,1},c_purple);
            hold on
            polarPlotDay(templates{i,h}(:,4),smoothedRotatedCircadianMatrices{i,1},c_blue);
            j = j+1;
        end
        subtitle(t,hems{h-1});
    end


else
    for h = 2:2+bl
        figure('units','inches','position',[1 1 2 5]);%('Position', get(0, 'Screensize'));
        t = tiledlayout(5,2-overlaid);
        j = 1;
        for i =[1,3,4,2,5]
            nexttile(j)
            plot((0:143)/6,[templates{i,h}(:,1)-mean(templates{i,h}(:,1),'omitnan')],'Color',c_yellow,'LineWidth',2);
            %plot((0:143)/6,[templates{i,h}(:,1);templates{i,h}(:,1)],'Color',c_yellow,'LineWidth',2);
            plot((0:143)/6,[templates{i,h}(:,1)-mean(templates{i,h}(:,1),'omitnan')],'Color',c_yellow,'LineWidth',2);
            title(smoothedRotatedCircadianMatrices{i,1});
            hold on
            %plot((0:143)/6,templates{i,h}(:,1)-mean(templates{i,h}(:,1),'omitnan'),'Color',c_red,'LineWidth',2);
            if ~overlaid
                nexttile(5*(1)+j)
            end

            plot((0:143)/6,[templates{i,h}(:,3)-mean(templates{i,h}(:,3),'omitnan')],'Color',c_purple,'LineWidth',2);
            %plot((0:143)/6,[templates{i,h}(:,3);templates{i,h}(:,3)],'Color',c_purple,'LineWidth',2);

            hold on
            plot((0:143)/6,[templates{i,h}(:,4)-mean(templates{i,h}(:,4),'omitnan')],'Color',c_blue,'LineWidth',2);
            %plot((0:143)/6,[templates{i,h}(:,4);templates{i,h}(:,4)],'Color',c_blue,'LineWidth',2);

            title(smoothedRotatedCircadianMatrices{i,1});
            linkaxes;
            xticks([]);
            %xticks([0,143/24,143/12,143/6,143]);
            j = j+1;
        end
        title(t,hems{h-1});
    end
end
end